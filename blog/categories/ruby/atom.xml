<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 割り箸ポテチ]]></title>
  <link href="http://blog.chopschips.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.chopschips.net/"/>
  <updated>2014-06-19T01:59:59+09:00</updated>
  <id>http://blog.chopschips.net/</id>
  <author>
    <name><![CDATA[Kawahara Taisuke / 河原太介]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[書評:パーフェクトRuby on Rails]]></title>
    <link href="http://blog.chopschips.net/blog/2014/06/18/perfect-ruby-on-rails/"/>
    <updated>2014-06-18T23:50:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2014/06/18/perfect-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>これからRailsを覚える友人に書籍を薦める機会があればこの2冊を選びます。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774165166&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774164100&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>特に1冊目の
<a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=chopschips03-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=chopschips03-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
は<strong>「これからRailsを覚える同僚に紹介する」</strong>という用途にも最適な一冊だと思います。</p>

<p>こういう書籍の内容は"Railsの標準機能"の枠に収まっている事が多いのですが、実際の開発現場においてはRails本体の機能ではないものの、
多くの現場でデファクトスタンダードになっているgemが数多く存在しています。</p>

<p>そのような情報に関してはアンテナを広げてキャッチアップしていくしかないのですが、
この書籍はRails非標準の内容にまで深く踏み込んでおり、初学者の最初の一歩をブーストしてくれます。
もちろん非標準の内容については広く普及しているかどうか(かつ長くその地位を保てるか)意見のわかれる点でもあるのですが、
少なくとも自分の主観で読み進めて違和感のある部分はほとんどありませんでした。</p>

<p>Railsで初めてWebアプリ開発を行うという方には適切では無いかもしれませんが、
他の言語・フレームワークの経験があるような技術者にはこれくらいの内容のほうが効率が良いです。</p>

<p>具体的にどこがよかったかについては後半で述べます。</p>

<p>2冊目の
<a href="http://www.amazon.co.jp/gp/product/4774164100/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774164100&linkCode=as2&tag=chopschips03-22">Ruby on Rails 4 アプリケーションプログラミング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=chopschips03-22&l=as2&o=9&a=4774164100" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
は、1冊めを補完する目的でおすすめです。
バリデータやビューのヘルパなどのリファレンス的な情報が豊富です。</p>

<p>今回は、特に"パーフェクトRuby on Rails"について良いと思った点をメモしておこうと思います。</p>

<!-- more -->


<a name="L...........................................Ruby.on.Rails"></a>
<h1>ここがおすすめ：パーフェクト Ruby on Rails</h1>

<p>「この本以外では載っているのを見たことがない！」というトピックばかりではありませんが、読んでいて目に止まったおすすめポイントを雑にメモしていきます。</p>

<p><code>foobar</code>みたいになっているのはgemの名前かコード片です。<br/>
<strong>パッと見て心当たりが無いものが多い</strong>ならこの本を読む価値ありだと思います。</p>

<ul>
<li>Railsのバージョンが4.1.1とかなり新しい。(2014-06-18時点で最新)</li>
<li>92ページまででscaffoldingやMVCのような伝統的Rails入門が終わり、残りの約300ページは後述するような実践的な内容。</li>
<li>HamlとSlimについてコード例を示しつつ紹介している。(実際のところERBで書いてるようなプロジェクトは稀だと思う)</li>
<li>Asset PipelineについてSprocketsから丁寧に解説がある。</li>
<li>CoffeeScriptの要点をおさえた解説。Source Mapsに対する言及など。</li>
<li>Sassの詳細な解説</li>
<li>Turbolinksの解説

<ul>
<li>動作条件や発生するイベントなどの一覧</li>
<li><code>jquery-turbolinks</code> にも言及</li>
<li>イベントの多重定義などよくある落とし穴の回避方法</li>
</ul>
</li>
<li><strong>WorkerやDecoratorのようなMVC以外の新しいレイヤーの定義方法</strong></li>
<li><code>sidekiq</code> を用いた非同期処理</li>
<li>PryとRailsの組み合わせ方</li>
<li><code>hirb</code>や<code>better_errors</code>のような開発支援gemの紹介</li>
<li>サンプルアプリケーション

<ul>
<li>動作保証のため、使用しているgemのPatchレベル以外のバージョンが固定されている</li>
<li>OAuthを使ったTwitterアカウントによる認証を例示(<code>omniauth</code>)</li>
<li>BootstrapをRailsアプリで使う方法を例示。モーダルを表示してAjaxでフォーム送信など。</li>
<li><code>devise</code>を使わずシンプルに認証を実装。(<code>devise</code>については別項で言及)</li>
<li><code>kaminari-bootstrap</code>や<code>ransack</code>、<code>carrierwave</code>のような定番gemの利用</li>
<li>コードがgithubで公開されています。<a href="http://willnet.in/124">パーフェクト Ruby on Rails のサンプルアプリケーションを Github 上で公開しました &ndash; willnet.in</a></li>
</ul>
</li>
<li><strong>コントローラ層でのエラーハンドリング</strong>

<ul>
<li>存在しないアクションをリクエストされた時に500の代わりに404を返す方法</li>
<li><code>exception_notification</code> を使ったエラーの通知</li>
</ul>
</li>
<li>結構まじめにminitestとRSpecの比較をしている。</li>
<li>RSpecは3系の使い方に触れている(6/2にリリース)</li>
<li>fixture replacementの項で<code>factory_girl</code>の使い方を説明</li>
<li>RSpecのexpect記法とshould記法について軽く説明</li>
<li>エンドツーエンドテストは<code>capybara</code>と<code>poltergeist</code>を使っている。(Seleniumはあまり使われていないとぶっちゃけている)</li>
<li>Vagrantを紹介する際に不正なboxを使ってしまう危険性に触れた上で、Phusion社がソースごと公開しているboxの利用を例示</li>
<li>Chef-soloを使ったプロビジョニングをそこそこに解説</li>
<li>Unicornで<code>preload_app</code>を有効にしつつgraceful restartする方法</li>
<li>Capistranoは3系で解説

<ul>
<li><code>capistrano3-unicorn</code>を使用</li>
<li>deploy実行時のフックとフローについて簡単に解説</li>
</ul>
</li>
<li>New Relicの結構詳細な解説</li>
<li>ログをfluentdで集めてkibanaで可視化する方法についてざっくり紹介</li>
<li>実践的なモデル設計の解説

<ul>
<li>モデルクラスの分割方法</li>
<li>ActiveModel::EachValidatorの使い方</li>
<li>ActiveModelの使い方</li>
<li>Concern</li>
<li>サービスクラスを用いるモデル設計</li>
</ul>
</li>
<li><strong>Basic認証を題材としたRack Middlewareの作り方の本格的な解説</strong></li>
<li>Railtieとは何か、という説明</li>
<li><strong>プラグインの作り方(gem化まで丁寧に解説)</strong>

<ul>
<li>Railtie型</li>
<li>Engine型</li>
</ul>
</li>
<li>rbenvの使い方が書いてある。</li>
</ul>


<p>最近のRailsはCoffeeScriptやSassなどruby以外に必要な知識が増えましたが、
Asset Pipelineの依存性管理などややこしい部分からsassのディレクティブに至るまで丁寧にカバーしてあります。</p>

<p>また、capistranoやrspecなどは過去のバージョンと比較して大きく変わっている部分もあり、
Webだけで勉強しようとすると古い情報を掴んで混乱する可能性があるため、
書籍という形である程度まとまった情報になっていると人に薦めるときに便利です。</p>

<p>繰り返しになりますが、実質的にデファクトスタンダードになっているgemがたくさんあるにも関わらず、
Rails標準の機能の解説に留まっている書籍やトレーニングコースも多いです。
本書は<code>kaminari</code>、<code>omniauth</code>、<code>carrierwave</code>、<code>poltergeist</code>など多数のgemが紹介されており、
フロントエンドにBootstrapを使ったサンプルアプリの実装を通じて効率よくメジャーな道具を学習することができます。</p>

<p>以上、おすすめポイントのまとめでした。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774165166&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<hr />

<a name="L......"></a>
<h3>蛇足</h3>

<ul>
<li><code>spring</code>ってなんか動作が遅くないですかね。4.1で標準になったので紹介されているんだと思いますが、結局まだ<code>zeus</code>使ってます。</li>
<li><code>cancan</code>は最近は<code>cancancan</code>とか出てきててややカオス。触れられていないのはそれが理由かな。そもそも認証と認可は安易に外部実装に頼らないほうが良いという意見もあるし。</li>
<li>デバッガについてはRails本の範疇外かな。<code>byebug</code>と<code>ruby-debug</code>周辺はどうなっていくんだろう。</li>
<li>プロファイリングについても少し書いて欲しかったかも。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby 実行環境の構築 - rbenvの使い方とその仕組み]]></title>
    <link href="http://blog.chopschips.net/blog/2014/06/15/rbenv/"/>
    <updated>2014-06-15T18:00:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2014/06/15/rbenv</id>
    <content type="html"><![CDATA[<p><ul>
 <li><a href="#section_0">rbenvとruby-buildのインストール方法</a></li>
 <li><ul>
  <li><a href="#section_1">インストール可能なrubyバージョンの一覧表示</a></li>
  <li><a href="#section_2">指定したバージョンのrubyをインストール</a></li>
  <li><a href="#section_3">使用するrubyのバージョンを指定する</a></li>
  <li><a href="#section_4">インストール済みrubyバージョンの一覧表示</a></li>
 </ul></li>
 <li><a href="#section_5">rbenvとは</a></li>
 <li><a href="#section_6">rbenvの仕組み</a></li>
 <li><ul>
  <li><a href="#section_7">バージョン決定の仕組み</a></li>
  <li><a href="#section_8">各バージョンの実体</a></li>
  <li><a href="#section_9">rbenv install(ruby-build)の動作</a></li>
 </ul></li>
</ul>

</p>

<a name="section_0"></a>
<h1>rbenvとruby-buildのインストール方法</h1>

<p><code>bash
$ git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
$ git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
$ echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; ~/.bash_profile
$ echo 'eval "$(rbenv init -)"' &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile
</code></p>

<p><code>.bash_profile</code>は自分の使っているシェルに応じて<code>.zshrc</code>などに読み替えてください。</p>

<!-- more -->


<a name="section_1"></a>
<h2>インストール可能なrubyバージョンの一覧表示</h2>

<p><code>bash
$ rbenv install -l
</code></p>

<pre><code>Available versions:
  1.8.6-p383
  1.8.6-p420
  1.8.7-p249
  1.8.7-p302
  1.8.7-p334
  (省略)
</code></pre>

<a name="section_2"></a>
<h2>指定したバージョンのrubyをインストール</h2>

<p>下記はバージョン2.1.2をインストールする例です。</p>

<p><code>bash
$ rbenv install 2.1.2
</code></p>

<a name="section_3"></a>
<h2>使用するrubyのバージョンを指定する</h2>

<p>rbenvでは、ディレクトリ階層ごとに使用するrubyのバージョンを指定できます。
下記はカレントディレクトリ以下で2.1.2を使用する例です。</p>

<p><code>bash
$ rbenv local 2.1.2
</code></p>

<p>rbenvによる指定が意図したように行われているかどうかは以下のように確認できます。</p>

<p><code>bash
$ ruby --version
ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]
</code></p>

<a name="section_4"></a>
<h2>インストール済みrubyバージョンの一覧表示</h2>

<p><code>bash
$ rbenv versions
</code></p>

<pre><code>  system
  2.0.0-p353
  2.1.0
* 2.1.2 (set by ~/projects/xxx/.ruby-version)
</code></pre>

<p>systemは、<code>/usr/bin/ruby</code>のようにrbenv以外の方法でシステムへインストールされたrubyです。
どのパスのコマンドが実行されるかは<code>PATH</code>環境変数によって決まります。</p>

<p>アスタリスクの付いているバージョンが選択されたバージョンです。
カッコの内容はrbenvがそのバージョンを選択した理由です(後述)。</p>

<a name="section_5"></a>
<h1>rbenvとは</h1>

<p>rbenvは複数のバージョンのruby実行環境を切り替えるための仕組みです。</p>

<p><a href="https://github.com/sstephenson/rbenv">https://github.com/sstephenson/rbenv</a></p>

<p>rbenvには、同一の作者による ruby-build というプラグインがあります。
これは指定したrubyのソースをダウンロードして、ローカルでビルドするための仕組みです。</p>

<p><a href="https://github.com/sstephenson/ruby-build">https://github.com/sstephenson/ruby-build</a></p>

<p>rbnevの類似のものとして rvm があります。</p>

<p><a href="https://rvm.io/">https://rvm.io/</a></p>

<a name="section_6"></a>
<h1>rbenvの仕組み</h1>

<p>rbenvでは<code>PATH</code>環境変数とシンボリックリンクを用いて、
rubyやirbのようなコマンドの呼出経路に割り込むことでバージョンの切り替えを行っています。</p>

<p>ruby、irb、gem、およびrspecやrakeなどgemによってインストールされるコマンド群は、
以下のパスにシンボリックリンクが作られます。</p>

<p><code>~/.rbenv/shims/</code></p>

<p>これらのシンボリックリンクは、<code>rbenv rehash</code>が実行されるたびに更新されます。</p>

<p>また、インストールの際にシェルのrcスクリプトに追加した<code>eval "$(rbenv init -)"</code>というコマンドでは、下記が行われています。</p>

<ul>
<li>
<code>PATH</code> 環境変数の更新(<code>export PATH="~/.rbenv/shims:${PATH}"</code>)</li>
<li>rbenv rehashの実行</li>
</ul>


<p>これにより、ruby、irbなどのruby関連コマンドはrbenvの影響下にある~/.rbenv/shims/以下のシンボリックリンクに置き換えられています。</p>

<p><code>bash
$ which irb
~/.rbenv/shims/irb
</code></p>

<a name="section_7"></a>
<h2>バージョン決定の仕組み</h2>

<p>shims以下のコマンドでは以下のように起動するrubyインタプリタのバージョンを決定します。</p>

<ol>
<li>
<code>RBENV_VERSION</code>環境変数の中身。</li>
<li>スクリプトの置いてあるディレクトリから上位にさかのぼって最初に見つかった<code>.ruby-version</code>ファイルの中身。</li>
<li>カレントディレクトリから上位にさかのぼって最初に見つかった<code>.ruby-version</code>ファイルの中身。
このファイルは<code>rbenv local</code>コマンドで作成することができます。</li>
<li>
<code>~/.rbenv/version</code> ファイルの中身。
このファイルは<code>rbenv global</code>コマンドで作成することができます。</li>
</ol>


<p>つまり、シェルのカレントディレクトリとスクリプト自体が置いてあるディレクトリが異なり、
それぞれ.ruby-versionファイルが存在するような場合、後者が優先されます。
また、<code>RBENV_VERSION</code>環境変数は常に優先されます。</p>

<p>例えば製品環境でgodとrbenvを使ってデーモンプロセスのrubyバージョンを指定するような場合にはこの点に注意する必要があります。</p>

<a name="section_8"></a>
<h2>各バージョンの実体</h2>

<p><code>rbenv install</code>でインストールしたruby実行環境は<code>~/.rbenv/versions</code>ディレクトリの下に保存されます。</p>

<pre><code>~/.rbenv/versions/
├── 2.0.0-p353
│   ├── bin
│   ├── include
│   ├── lib
│   └── share
├── 2.1.0
│   ├── bin
│   ├── include
│   ├── lib
│   └── share
└── 2.1.2
    ├── bin
    ├── include
    ├── lib
    └── share
</code></pre>

<p>gemもこのディレクトリ以下に保存され、例えば2.1.2にインストールした<code>nokogiri</code>1.6.1の中身を見たければ以下のディレクトリにあります。</p>

<pre><code>~/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/nokogiri-1.6.1/
</code></pre>

<a name="section_9"></a>
<h2>rbenv install(ruby-build)の動作</h2>

<p><code>rbenv install</code>は概ね以下の様な動作をします。</p>

<ol>
<li>CDNで配布されているrubyのソースコードをダウンロード</li>
<li>ダウンロードしたソースコードを展開してビルド</li>
</ol>


<p>このCDNは本稿執筆時点ではAmazon CloudFrontが使用されており、そのスポンサーはBasecampです。(<a href="https://github.com/sstephenson/ruby-build#package-download-mirrors">参考</a>)</p>

<p>BasecampはRailsを開発した<a href="http://david.heinemeierhansson.com/">DHH</a>がCTOをやっている会社です。ありがとうBasecampのみなさん。</p>

<p>なおBasecampは去年まで37signalsという名前でした。こちらの方が馴染みが深い人が多いかもしれません。</p>

<p>ソースコードの配布URLは<code>ruby-build</code>に記述されています。</p>

<p>具体的には以下のパスに1ファイル1バージョンで書かれています。</p>

<p><code>bash
$ ls -1 ~/.rbenv/plugins/ruby-build/share/ruby-build/
1.8.6-p383
1.8.6-p420
1.8.7-p249
1.8.7-p302
1.8.7-p334
1.8.7-p352
1.8.7-p357
1.8.7-p358
1.8.7-p370
1.8.7-p371
(省略)
</code></p>

<p><code>openssl</code>など依存パッケージが同時に配布されている場合もあり、ビルド環境に応じてそれらもダウンロードされます。
またコードのURLにはSHA2のチェックサムが含まれており、<code>shasum</code>などのツールが利用できる環境であれば自動的に改ざん検知が行われます。</p>

<p><code>bash
$ cat ~/.rbenv/plugins/ruby-build/share/ruby-build/2.1.2
install_package "openssl-1.0.1h" "https://www.openssl.org/source/openssl-1.0.1h.tar.gz#9d1c8a9836aa63e2c6adb684186cbd4371c9e9dcc01d6e3bb447abf2d4d3d093" mac_openssl --if has_broken_mac_openssl
install_package "ruby-2.1.2" "http://cache.ruby-lang.org/pub/ruby/2.1/ruby-2.1.2.tar.gz#f22a6447811a81f3c808d1c2a5ce3b5f5f0955c68c9a749182feb425589e6635" ldflags_dirs standard verify_openssl
</code></p>

<p>新しいバージョンのrubyがリリースされたら下記のように更新すれば反映されます。</p>

<p><code>bash
$ cd ~/.rbenv/plugins/ruby-build
$ git pull
</code></p>

<p>環境変数<code>RUBY_BUILD_CACHE_PATH</code>でキャッシュディレクトリが指定されている場合、
<code>rbenv install</code>はコードをダウンロードする代わりにそのパスに置いてあるファイルを使用します。
キャッシュディレクトリに該当するファイルがない場合にはCDNからダウンロードしたファイルをキャッシュディレクトリに保存します。</p>

<p>あらかじめ取得しておいたソースを使用することで、
インターネットへの接続が制限されている環境でもrbenvを使用することができます。</p>

<p>また、製品環境でrbenvを利用する場合にもキャッシュを用いることで外的要因に依存せずプロビジョニングを行うことができるようになります。</p>
]]></content>
  </entry>
  
</feed>
