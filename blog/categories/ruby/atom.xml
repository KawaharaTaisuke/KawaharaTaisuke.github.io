<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 割り箸ポテチ]]></title>
  <link href="http://blog.chopschips.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.chopschips.net/"/>
  <updated>2015-04-17T02:33:20+09:00</updated>
  <id>http://blog.chopschips.net/</id>
  <author>
    <name><![CDATA[Kawahara Taisuke / 河原太介]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sidekiqのコードに潜む愉快なメソッドたち]]></title>
    <link href="http://blog.chopschips.net/blog/2015/04/04/funcy-methods-in-sidekiq/"/>
    <updated>2015-04-04T22:50:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2015/04/04/funcy-methods-in-sidekiq</id>
    <content type="html"><![CDATA[<br/>


<p>少し前にRails4.2のActiveJobのバックエンドについて調べました。</p>

<p><a href="http://blog.chopschips.net/blog/2015/02/26/active-job/">Resque、SidekiqからSucker PunchまでActiveJobのバックエンドについてひと通り調べてみた</a></p>

<p>このとき<a href="https://github.com/mperham/sidekiq">Sidekiq</a>のコードを読んで、<a href="https://github.com/celluloid/celluloid">Celluloid</a>によるアクターモデルで並行処理を実装していることを知りました。
ちょうどScalaやErlangでアクターを使う方法を調べていたところだったので興味がわき、Celluloidを利用したアプリケーションのサンプルとして読んでみることにしました。</p>

<p>その時見つけた愉快なメソッドを紹介します。</p>

<p>今回読んだSidekiqのバージョンは3.3.3です。</p>

<a name="L............"></a>
<h2>注意事項</h2>

<ul>
<li>本エントリはSidekiqやアクターの解説記事ではありません。</li>
<li>記事に機種依存文字が含まれています。

<ul>
<li>OSXのChromeとFirefox、iOSのSafariとChromeでのみ表示を確認しています。</li>
<li>iOSのブラウザではGithubから引用しているコードの一部が化けます。</li>
</ul>
</li>
</ul>


<!-- more -->




<h3><code style="font-family: monospace;"> Sidekiq::Queue#💣 </code></h3>


<p>SidekiqはRedisをバックエンドとしてジョブを管理・実行するプロダクトです。</p>

<p><code>Sidekiq::Queue</code>はそのジョブキューを扱うためのクラスで、💣はキューをクリアするためのメソッドです。</p>

<p>もしも使うのであれば次のような字面になります。</p>

<p>```ruby
require &lsquo;sidekiq/api&rsquo;</p>

<p>queue = Sidekiq::Queue.new
queue.💣
```</p>

<p>このメソッドはSidekiq::Queue#clearのエイリアスとして、以下で定義されています。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/api.rb#L246-L254">https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/api.rb#L246-L254</a></p>

<script src="http://gist-it.appspot.com/github/mperham/sidekiq/raw/v3.3.3/lib/sidekiq/api.rb?slice=245:253"></script>


<p>なかなかハジけたメソッド名ですよね。</p>

<p>なおSidekiq::SortedSetにも同様のメソッドがあります。</p>

<h3><code style="font-family: monospace;"> Sidekiq::CLI#☠ </code></h3>


<p>exitのエイリアスとして定義されています。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/cli.rb#L205">https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/cli.rb#L205</a></p>

<script src="http://gist-it.appspot.com/github/mperham/sidekiq/raw/v3.3.3/lib/sidekiq/cli.rb?slice=203:204"></script>


<p>exitはSidekiq::CLIには定義されていないので、この場合Kernel.exitが実行されます。</p>

<p>exitは由緒正しいメソッド名ですが、実行すればこのプロセスは死ぬわけですから、dieの方がより率直に動作を表現していると言えます。
ただ、<code>☠</code>まで行くと毒薬かもしれないし海賊かもしれないため意図が曖昧になっており、好ましくないと思います。</p>

<h3><code style="font-family: monospace;"> Sidekiq::Manager#❤ </code></h3>


<p>なんとSidekiq::Manager#heatbeatの中で実際に使われています。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/manager.rb#L137-L148">https://github.com/mperham/sidekiq/blob/v3.3.3/lib/sidekiq/manager.rb#L137-L148</a></p>

<script src="http://gist-it.appspot.com/github/mperham/sidekiq/raw/v3.3.3/lib/sidekiq/manager.rb?slice=136:147"></script>


<p>サービスインしたあとでこんな実装が動いているのを知ってしまったら、胸がドキドキするかもしれませんね。</p>

<h3><code style="font-size: 0.8em; font-family: Menlo, Monaco, 'Andale Mono', 'lucida console', 'Courier New', monospace;">
Sidekiq.❨╯°□°❩╯︵┻━┻ 
</code></h3>


<p>さて、このメソッドは何のためのメソッドなのでしょうか。
実行すると下記のメッセージが表示されます。</p>

<p><code>"Calm down, bro"</code></p>

<p>意訳すると、まあまあ兄さん落ち着いて、というところでしょうか。</p>

<p>このメソッドにはRSpecで書かれた単体テストがあります。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.3/test/test_sidekiq.rb#L28-L36  ">https://github.com/mperham/sidekiq/blob/v3.3.3/test/test_sidekiq.rb#L28-L36  </a>
※iOSで見ると一部文字化けすると思います。</p>

<script src="http://gist-it.appspot.com/github/mperham/sidekiq/raw/v3.3.3/test/test_sidekiq.rb?slice=27:35"></script>


<p>どうやらこのメソッドは、怒れるプログラマが感情的な仕草を表現できるようにしつつ、その気持ちを宥めるために作られたメソッドのようです。</p>

<a name="L........."></a>
<h2>まとめ</h2>

<p>4つの愉快なメソッドを紹介しました。</p>

<ul>
<li><code>Sidekiq::Queue#💣</code></li>
<li><code>Sidekiq::CLI#☠</code></li>
<li><code>Sidekiq::Manager#❤</code></li>
<li><code>Sidekiq.❨╯°□°❩╯︵┻━┻</code></li>
</ul>


<p>これらのうち、実際に内部で使われているのは<code>Sidekiq::Manager#❤</code>だけです。</p>

<p>SidekiqはCOVERALLSというサービスでコミットごとにテストを実行してカバレッジ計測をしており、今日時点のカバレッジは85.67%です。
<code>Sidekiq::Manager#❤</code>についてもテストで最低一度は実行していることが確認されています。</p>

<p><a href="https://coveralls.io/builds/2264006/source?filename=lib%2Fsidekiq%2Fmanager.rb#L137">https://coveralls.io/builds/2264006/source?filename=lib%2Fsidekiq%2Fmanager.rb#L137</a></p>

<p><code>Sidekiq::Queue#💣</code> と <code>Sidekiq::CLI#☠</code> はただのエイリアスで、内部では一度も使用されていません。
<code>Sidekiq.❨╯°□°❩╯︵┻━┻</code>
はジョークメソッドで内部でも使われていませんが、テストはちゃんと書かれていました。</p>

<a name="L....................."></a>
<h3>絵文字について</h3>

<p><code>💣</code>、<code>❤</code> はUnicode6.0で追加された携帯電話の絵文字で、いわゆる機種依存文字です。海外でもemojiと呼ぶようです。</p>

<p><a href="http://www.unicode.org/Public/UCD/latest/ucd/StandardizedVariants.html">Standardized Variants</a></p>

<ul>
<li><a href="http://www.fileformat.info/info/unicode/char/1f4a3/index.htm">BOMB</a></li>
<li><a href="http://www.fileformat.info/info/unicode/char/2764/index.htm">HEAVY BLACK HEART</a></li>
</ul>


<p><code>☠</code> も機種依存文字ですが、上の2つに比べると古い文字のようですね。</p>

<ul>
<li><a href="http://www.fileformat.info/info/unicode/char/2620/index.htm">SKULL AND CROSSBONES</a></li>
</ul>


<p>常識的に考えると絵文字でコード書くなんて論外という方がほとんどだと思います(それでもSidekiqは素晴らしいソフトウェアだと思います)。</p>

<p>ただ、このたびあえて先入観を捨ててその可能性を検討してみた結果、下記の気づきがありました。</p>

<ul>
<li>Githubの検索フォームで <code>💣</code> はヒットするけど <code>❤</code>はヒットしない。</li>
<li>Google検索では <code>💣</code> も <code>❤</code> もヒットしない。</li>
<li>似たような文字がいっぱいある。 <code>❤</code> とか <code>♥</code>とか<code>❥</code>とか。</li>
<li>同じUnicodeの文字でもフォント次第で大幅に見た目が変わり得る。</li>
<li>当然だけど機種依存文字は端末によっては表示することができないことがある。</li>
</ul>


<p>少なくとも検索性がかなり悪くなるということがわかりましたので、個人的には絵文字でコード書くのは避けようと思います。</p>

<p>アクターの話はまた今度気が向いたら書きます。</p>

<p>なお私はどちらかというとResqueの方が好きです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 開発をサポートするChrome拡張 Rails Panel の機能と仕組み]]></title>
    <link href="http://blog.chopschips.net/blog/2015/03/06/rails-panel/"/>
    <updated>2015-03-06T23:38:45+09:00</updated>
    <id>http://blog.chopschips.net/blog/2015/03/06/rails-panel</id>
    <content type="html"><![CDATA[<p><a href="http://www.rubyonrails365.com/7-must-have-gems-to-install-on-any-project/">7 must have Development Gems to install on every project</a></p>

<p>この記事を読んでいて、Rails PanelというChrome拡張を知りました。</p>

<ul>
<li><a href="https://github.com/qqshfox/meta_request">qqshfox/meta_request</a></li>
<li><a href="https://chrome.google.com/webstore/detail/railspanel/gjpfobpafnhjhbajcjgccbbdofdckggg">RailsPanel &ndash; Chrome ウェブストア</a></li>
</ul>


<a name="Rails.Panel.................."></a>
<h1>Rails Panelでできること</h1>

<p>デベロッパーツールにRailsというパネルが追加されます。
このパネルでは、ページリクエスト単位で下記のような情報を表示することができます。</p>

<ul>
<li>Breakdown: 処理時間の内訳(ActiveRecord, Rendering, Other)</li>
<li>Params: コントローラから参照できるparamsの内容</li>
<li>ActiveRecord: そのリクエストを処理する際に発行したSQLと処理時間</li>
<li>Rendering: ビューテンプレートごとの描画時間</li>
</ul>


<p><img src="/images/post_20150306_rails_panel/ss_01.png"></p>

<p>要するに <code>rails server</code> の標準出力(あるいは <code>log/${RAILS_ENV}.log</code>)の情報を見やすく表示してくれます。</p>

<!-- more -->


<a name="L........."></a>
<h1>使い方</h1>

<ul>
<li>ChromeにはChrome ウェブストアからインストールします。<br/>
<a href="https://chrome.google.com/webstore/detail/railspanel/gjpfobpafnhjhbajcjgccbbdofdckggg">RailsPanel &ndash; Chrome ウェブストア</a></li>
<li>Railsには <code>meta_request</code> というgemを追加します。</li>
</ul>


<p><code>
group :development do
  gem "meta_request"
end
</code></p>

<a name="L.................."></a>
<h1>動作の仕組み</h1>

<p>meta_requestをbundleすると、いくつかのRackミドルウェアが自動的に組み込まれます。</p>

<ul>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/middlewares.rb">rails_panel/middlewares.rb at master · dejan/rails_panel</a></li>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/railtie.rb">rails_panel/railtie.rb at master · dejan/rails_panel</a></li>
</ul>


<p>この中のMetaRequest::Middlewares::Headersによって <code>X-Meta-Request-Version</code>が、
MetaRequest::Middlewares::RequestIdによって <code>X-Request-Id</code>が
Railsアプリケーションが返すすべてのレスポンスのヘッダに追加されます。</p>

<ul>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/middlewares/headers.rb">rails_panel/headers.rb at master · dejan/rails_panel</a></li>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/middlewares/request_id.rb">rails_panel/request_id.rb at master · dejan/rails_panel</a></li>
</ul>


<p>Rails Panelを有効にしていると、 <code>X-Meta-Request-Version</code> がレスポンスヘッダに存在する際に、
Chromeは <code>/__meta_request/${X-Request-Id}.json</code> というパスにリクエストを投げます。</p>

<p><a href="https://github.com/dejan/rails_panel/blob/master/rails_panel/assets/javascripts/requests.js#L12">rails_panel/requests.js at master · dejan/rails_panel</a></p>

<p>このリクエストもmeta_requestのRackミドルウェアで処理され、Railsアプリ層の手前の段階で、必要な情報がjsonでレスポンスされます。</p>

<p>ただし、このリクエストのログもRackミドルウェア層によってRails.loggerに出力するため、Railsのログには下記のような痕跡が残ります。</p>

<p><code>
Started GET "/__meta_request/abcd92a2-3859-4972-9708-8303fe238e9e.json" for ::1 at 2015-03-06 23:45:37 +0900
</code></p>

<p>なお、 <code>/__meta_request/${X-Request-Id}.json</code> のレスポンスで返されるjsonファイルは、<code>tmp/data/meta_request/</code> 以下に最大10個まで保存されます。<br/>
該当のコードはこのあたり。</p>

<ul>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/middlewares/app_request_handler.rb">rails_panel/app_request_handler.rb at master · dejan/rails_panel</a></li>
<li><a href="https://github.com/dejan/rails_panel/blob/master/meta_request/lib/meta_request/storage.rb#L12">rails_panel/storage.rb at master · dejan/rails_panel</a></li>
</ul>


<p>RackミドルウェアとChrome拡張でモニタリング用の機能を実装するというアプローチは他のことにも応用ができそうですね。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resque、SidekiqからSucker PunchまでActiveJobのバックエンドについてひと通り調べてみた]]></title>
    <link href="http://blog.chopschips.net/blog/2015/02/26/active-job/"/>
    <updated>2015-02-26T22:11:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2015/02/26/active-job</id>
    <content type="html"><![CDATA[<a name="ActiveJob................................................Redis....................."></a>
<h1>ActiveJobのバックエンドと、永続化先としてRedisが好まれる理由</h1>

<p>Rails 4.2で、ActiveJobというクラスが導入されました。</p>

<p>これ以前より、Railsで非同期処理を行う際にはResqueやSidekiq、Delayed Jobなどが広く使われていましたが、
ActiveJobはジョブを記述するためのインタフェースを抽象化して、
ジョブの実装を変えること無くジョブランナーを切り替えることを可能にするものです。
なおActiveJobにおいては、バックエンドを指定しなければジョブは非同期実行しようとしても即座に実行されます。</p>

<p>Rails 4.2.0時点では、ActiveJobのバックエンドとして以下のページにある9つのいずれかを使用できます。</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveJob/QueueAdapters.html">ActiveJob::QueueAdapters</a></p>

<ul>
<li>Backburner</li>
<li>Delayed Job</li>
<li>Qu</li>
<li>Que</li>
<li>queue_classic</li>
<li>Resque 1.x</li>
<li>Sidekiq</li>
<li>Sneakers</li>
<li>Sucker Punch</li>
</ul>


<p>ちなみにRuby ToolboxのBackground Jobsというカテゴリの上位3つは、Resque、Sidekiq、Delayed Jobでした。この3つがよく使われている印象です。</p>

<p><a href="https://www.ruby-toolbox.com/categories/Background_Jobs">The Ruby Toolbox &ndash; Background Jobs: Save jobs in a queue and process them later wihout blocking your current thread</a></p>

<p>特にResque、Sidekiqは、ジョブの情報を永続化する先としてRedisを必須としています。</p>

<p>情報の保存先ならActiveRecord(RDBMS)でも良さそうなものですが、あえてRedisを必須としている理由は何だろうか考えてみました。</p>

<p>ぱっと思いつくのは、「キューにジョブが積まれた」というイベントをワーカーへ伝えるための手段として、
Redisの<a href="http://redis.io/topics/pubsub">Pub/Sub</a>や<a href="http://redis.io/commands/BLPOP">BLPOP</a>/<a href="http://redis.io/commands/brpop">BRPOP</a>のようなメッセージング機構を使うのが簡単で都合が良かったのではないか？ということです。</p>

<p>バックエンドにMySQLのようなRDBMSを使う場合、普通に考えるとワーカー側はジョブを保存したテーブルをロックしつつポーリングしないといけないのでスケールしなさそうだし、
RabbitMQのようなメッセージングサービスを用いるのと比べて、RedisであればRailsエンジニアは元々better memcachedとして使用しているケースが多いので導入のハードルが低いです。</p>

<p>というわけで、このエントリではResque、Sidekiqの2つについてはRedisのメッセージング機構を使っているかどうかを確認しつつ、
ActiveJobのページに挙げられている9つのプロダクトについてジョブ情報の保存先を調べてまとめてみようと思います。</p>

<p>9つの中で特にSucker Punchはジョブの保存先もワーカープロセスの起動も必要とせずに非同期処理を行えるので、簡単に作りたいならおすすめです。詳細は後述。</p>

<!-- more -->


<a name="Resque"></a>
<h1>Resque</h1>

<p>Rails 4.2.0時点においてActiveJobが対応しているのはRedisのバージョン1系列です。</p>

<p><a href="https://github.com/resque/resque/tree/1-x-stable">resque/resque at 1-x-stable</a></p>

<p>ワーカーを起動する場合はrakeタスクを実行するので、そのあたりからコードを読んでいきます。</p>

<p><a href="https://github.com/resque/resque/blob/1-x-stable/lib/tasks/resque.rake">lib/tasks/resque.task</a>
これはresque/tasksを読み込んでいるだけ。</p>

<p><a href="https://github.com/resque/resque/blob/1-x-stable/lib/resque/tasks.rb#L42">resque/tasks.rb</a>
<code>Resque::Worker#work</code>がメインループのようです。</p>

<p><a href="https://github.com/resque/resque/blob/1-x-stable/lib/resque/worker.rb#L205">resque/worker.rb</a>
ジョブが無い場合はインターバル分だけスリープする実装になっていました。
ジョブの取得はさらに読んでいくとRedisの<code>LPOP</code>を使っていて、キューが空でもブロックせずにnilが帰ってきます。</p>

<p>```
Resque::Worker#work
  Resque#reserve</p>

<pre><code>Resque::Job.reserve
  Resque.pop
    Redis#lpop(redis-3.2.1)
</code></pre>

<p>```</p>

<a name="L......"></a>
<h2>結論</h2>

<p>Resqueのバージョン1系はRedisのメッセージング機構は使わずにポーリングしてました。</p>

<p>ただ、2015-02-26時点のmasterブランチのHEADでは、インターバルに設定した値をタイムアウト値として<code>BLPOP</code>を使う実装になっていました。
(インターバルが1より小さい場合はnon-blockで実質ポーリング)</p>

<a name="Sidekiq"></a>
<h1>Sidekiq</h1>

<p>現時点で最新の3.3.2を読んでいきます。</p>

<p><a href="https://github.com/mperham/sidekiq/tree/v3.3.2">mperham/sidekiq at v3.3.2</a></p>

<p>Sidekiqのエントリポイントはbin/sidekiqです。
中身はSidekiq::CLI#runなのでそこを見てみます。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.2/lib/sidekiq/cli.rb#L76">sidekiq/cli.rb</a></p>

<p>Sidekiq::Launcher#runがメインループのようです。</p>

<p><a href="https://github.com/mperham/sidekiq/blob/v3.3.2/lib/sidekiq/launcher.rb#L39">sidekiq/launcher.rb</a></p>

<p>Celluloidを使ったアクターモデルでFetcherとManagerとPollerという3つのインスタンスが強調しつつ並行処理を行っているように見えます。
Pollerがスケジュールされたジョブをワークキューに載せ替える、ということをやっていました。
Managerの方では同時実行数の数だけProcessorのインスタンスを作って、
ProcessorごとにFetcher#fetchしています。
Fetcherの中身をざっくり追いかけると、
<a href="https://github.com/mperham/sidekiq/blob/v3.3.2/lib/sidekiq/fetch.rb#L102">sidekiq/fetch.rb</a>
```
Fetcher#fetch
  Fetcher.strategy</p>

<pre><code>Fetcher::BasicFetch#retrive_work
  Redis#brpop
</code></pre>

<p><code>``
という流れで最終的にRedisの</code>BRPOP`でジョブ情報を読みだしていました。</p>

<a name="L......"></a>
<h2>結論</h2>

<p>Sidekiqはポーリングせずに、Redisの<code>BRPOP</code>を使ってジョブが積まれたイベントをワーカーに通知していました。</p>

<a name="L.............................."></a>
<h1>その他のバックエンド</h1>

<a name="Backburner"></a>
<h2>Backburner</h2>

<p><a href="https://github.com/nesquena/backburner">nesquena/backburner</a></p>

<p><a href="http://kr.github.io/beanstalkd/">beanstalkd</a> というジョブキューサーバをバックエンドに使うようです。</p>

<a name="Delayed.Job"></a>
<h2>Delayed Job</h2>

<p><a href="https://github.com/collectiveidea/delayed_job">collectiveidea/delayed_job</a></p>

<p>バックエンドとして複数のプロダクトを指定できます。(DJはDelayed Jobのこと)</p>

<ul>
<li>ActiveRecord (DJ 3.0+)</li>
<li>DataMapper</li>
<li>IronMQ</li>
<li>Mongoid</li>
<li>MongoMapper</li>
<li>MongoMapper (DJ 3.0+, MongoMapper 0.11.0+)</li>
<li>Redis (DJ 3.0+, experimental)
<a href="https://github.com/collectiveidea/delayed_job/wiki/Backends">Backends · collectiveidea/delayed_job Wiki</a></li>
</ul>


<a name="Qu"></a>
<h2>Qu</h2>

<p><a href="https://github.com/bkeepers/qu">bkeepers/qu</a></p>

<p>RedisかMongo。</p>

<a name="Que"></a>
<h2>Que</h2>

<p><a href="https://github.com/chanks/que">chanks/que</a></p>

<p>PostgreSQLの<a href="http://www.postgresql.org/docs/current/static/explicit-locking.html#ADVISORY-LOCKS">Advisory Lock</a>を使います。</p>

<p>Advisory Lockを用いてMessage Queueを実現する方法については下記のサイトが詳しいです。</p>

<p><a href="http://d.hatena.ne.jp/n_shuyo/20090415/mq">PostgreSQL で簡易に MQ &ndash; Mi manca qualche giovedi`?</a></p>

<p>ちなみにMySQLでMessage Queueやる場合はQ4MというストレージエンジンがありますがActiveJobで使う方法は見つかりませんでした。</p>

<a name="queue_classic"></a>
<h2>queue_classic</h2>

<p><a href="https://github.com/QueueClassic/queue_classic">QueueClassic/queue_classic</a></p>

<p>PostgreSQL。listen / notify &amp; row lockingで実装。PostgreSQLはPub/Sub機能があるんですね。</p>

<a name="Sneakers"></a>
<h2>Sneakers</h2>

<p><a href="https://github.com/jondot/sneakers">jondot/sneakers</a></p>

<p>RabbitMQ。サンプルコードでRedisを使っていますが、デモのためのカウントアップをRedisでやっているだけです。</p>

<a name="Sucker.Punch"></a>
<h2>Sucker Punch</h2>

<p>ジョブ情報の保存先やワーカープロセスの立ち上げが必要ありません。
Celluloidで即座に非同期処理を開始するモデルのようですね。
RailsやSinatraのようなアプリケーションプロセス一つでジョブの実行が(非同期に)完結するというのがウリみたいです。</p>

<p>そのため、RedisやRabbitMQを用意する必要はないし、ワーカープロセスを起動する必要すらありません。</p>

<p>Herokuで安価にサービス運用したいのでRedisやRabbitMQは使いたくないけどビューのレスポンスは高速化したいような場合に使うと良さそうです。
個人的にはこれがActiveJobのデフォルトのバックエンドでも良いくらいだと思いました。</p>

<p>development環境のWebrickで試してみましたが、コントローラのアクションメソッドで<code>TestJob.perform_later</code>しても、アクションそのものはすぐにレスポンスが返ってきました。
また、ジョブが完了していなくても次のリクエストを処理することができていました。
Celluloid使っているらしいのでジョブはThreadで実行されていると思われます。</p>

<p>以下動作を確認したサンプルコードです。</p>

<p>```ruby</p>

<a name="config.routes.rb"></a>
<h1>config/routes.rb</h1>

<p>Rails.application.routes.draw do
  get &lsquo;top/welcome&rsquo;
  get &lsquo;top/job&rsquo;
  root &lsquo;top#welcome&rsquo;
end</p>

<a name="config.initializers.sucker_punch.rb"></a>
<h1>config/initializers/sucker_punch.rb</h1>

<p>Rails.application.configure do
  config.active_job.queue_adapter = :sucker_punch
end</p>

<a name="app.jobs.test_job.rb"></a>
<h1>app/jobs/test_job.rb</h1>

<p>class TestJob &lt; ActiveJob::Base
  queue_as :default</p>

<p>  def perform(*args)</p>

<pre><code>logger.info "job started"
sleep 5
logger.info "job finished"
</code></pre>

<p>  end
end</p>

<a name="app.controllers.top_controller.rb"></a>
<h1>app/controllers/top_controller.rb</h1>

<p>class TopController &lt; ApplicationController
  def welcome
  end</p>

<p>  def job</p>

<pre><code>TestJob.perform_later
flash[:notice] = "done!"
redirect_to top_welcome_path
</code></pre>

<p>  end
end</p>

<a name="app.views.welcome.view.erb"></a>
<h1>app/views/welcome.view.erb</h1>

<p>&lt;% if flash[:notice] %>
  &lt;%= flash[:notice] %>
&lt;% end %>
&lt;%= link_to &ldquo;Do job&rdquo;, top_job_path %>
```</p>

<a name="L......"></a>
<h1>感想</h1>

<ul>
<li>resque 1系がRedisを使いつつ実はポーリングしていたのが意外でした。</li>
<li>PostgreSQLはほとんど使ったこと無いんだけど、RDBMSでPub/Subできたら楽できそう。</li>
<li>Sucker Punchはワーカープロセスの起動無しで非同期処理できる点が便利。これでOKという場面は結構ありそうなので良い発見でした。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac(Yosemite)にMySQL 5.6とmysql2 gemをインストールする方法]]></title>
    <link href="http://blog.chopschips.net/blog/2015/02/15/macports-mysql2-gem/"/>
    <updated>2015-02-15T23:55:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2015/02/15/macports-mysql2-gem</id>
    <content type="html"><![CDATA[<p>Mac(OSX 10.10: Yosemite)にMySQL 5.6とmysql2 gemをインストールする方法のメモです。<br/>
MacPortsを使う方法と、Oracleが配布しているコミュニティ版を使う方法について述べます。</p>

<!-- more -->


<a name="MacPorts..............."></a>
<h1>MacPortsを使う場合</h1>

<a name="MySQL.5.6.server......................"></a>
<h2>MySQL 5.6(server)のインストール</h2>

<p><code>
% sudo port install mysql56-server
</code></p>

<a name="mysql2.gem......................"></a>
<h2>mysql2(gem)のインストール</h2>

<p>```</p>

<a name="bundle............................"></a>
<h1>bundle コマンドを使う場合</h1>

<p>% bundle config build.mysql2 &mdash;with-mysql-config=/opt/local/lib/mysql56/bin/mysql_config
% bundle install</p>

<a name="gem............................"></a>
<h1>gem コマンドを使う場合</h1>

<p>% gem install mysql2 &mdash; &mdash;with-mysql-config=/opt/local/lib/mysql56/bin/mysql_config
```</p>

<a name="MySQL.Community.Server..............."></a>
<h1>MySQL Community Serverを使う場合</h1>

<p><a href="http://dev.mysql.com/downloads/mysql/">http://dev.mysql.com/downloads/mysql/</a></p>

<p>ここからOSX 10.9用のdmgをダウンロードしてインストール。</p>

<p>システム環境設定パネルでMySQL Serverを起動します。
(MySQLのインストール後にOSXの再起動が必要な場合があるようです)</p>

<p><img src="/images/post_20150215_mysql/ss_01.png">
<img src="/images/post_20150215_mysql/ss_02.png"></p>

<p>gemをインストールする前にシンボリックリンクを貼る必要があります。</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib
</code></p>

<p>これを行わないと、gemのインストールは成功しますが、実行時に下記のようなエラーが発生します。</p>

<p>```ruby</p>

<a name="test.rb"></a>
<h1>test.rb</h1>

<p>require &lsquo;mysql2&rsquo;</p>

<p>client = Mysql2::Client.new(:host => &ldquo;localhost&rdquo;, :username => &ldquo;root&rdquo;)
puts client.query(&ldquo;show databases&rdquo;)
```</p>

<p><code>``
% ruby test.rb
/Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in</code>require': dlopen(/Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0-static/mysql2-0.3.17/mysql2/mysql2.bundle, 9): Library not loaded: libmysqlclient.18.dylib (LoadError)
  Referenced from: /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0-static/mysql2-0.3.17/mysql2/mysql2.bundle
  Reason: image not found &ndash; /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-darwin-14/2.2.0-static/mysql2-0.3.17/mysql2/mysql2.bundle</p>

<pre><code>    from /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in `require'
    from /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/mysql2-0.3.17/lib/mysql2.rb:8:in `&lt;top (required)&gt;'
    from /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in `require'
    from /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in `rescue in require'
    from /Users/kawahara_taisuke/.rbenv/versions/2.2.0/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:39:in `require'
    from test.rb:1:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>MySQLのディストリビューションパッケージの古いバグの名残のようです。</p>

<p>参考:</p>

<ul>
<li><a href="http://bugs.mysql.com/bug.php?id=61243">http://bugs.mysql.com/bug.php?id=61243</a></li>
<li><a href="http://stackoverflow.com/questions/5446747/ruby-mysql2-gem-not-working-mac-os-x-snow-leopard-ruby-1-9-2">http://stackoverflow.com/questions/5446747/ruby-mysql2-gem-not-working-mac-os-x-snow-leopard-ruby-1-9-2</a></li>
</ul>


<p>gemのインストールでは特別なことをする必要はありません。</p>

<p>```</p>

<a name="bundle............................"></a>
<h1>bundle コマンドを使う場合</h1>

<p>% bundle install</p>

<a name="gem............................"></a>
<h1>gem コマンドを使う場合</h1>

<p>% gem install mysql2
```</p>

<p>bundleを使う場合、前述のMacPorts用の設定を行っていると~/.bundle/configに下記の行が追加されているので、 削除しておく必要があります。</p>

<p>```</p>

<a name="L...bundle.config"></a>
<h1>~/.bundle/config</h1>

<p>BUNDLE_BUILD__MYSQL2: &ldquo;&mdash;with-mysql-config=/opt/local/lib/mysql56/bin/mysql_config&rdquo;
```</p>

<a name="MySQL.Server.............................."></a>
<h3>MySQL Serverのメモリ使用量が多い</h3>

<p>素のまま使っていると起動直後から400MBくらい割り当てられます。<br/>
下記のページを参考にして、 <code>table_definition_cache</code> というパラメータを適切に設定すれば抑えることができます。</p>

<p><a href="http://d.hatena.ne.jp/mabots/20140526/1401101070">Macbook Air にいれた開発用 MySQL 5.6.xx の メモリ使用量が異様に多い &ndash; 知のレバレッジを最大化せよ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[書評:パーフェクトRuby on Rails]]></title>
    <link href="http://blog.chopschips.net/blog/2014/06/18/perfect-ruby-on-rails/"/>
    <updated>2014-06-18T23:50:00+09:00</updated>
    <id>http://blog.chopschips.net/blog/2014/06/18/perfect-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>これからRailsを覚える友人に書籍を薦める機会があればこの2冊を選びます。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774165166&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774164100&ref=tf_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<p>特に1冊目の
<a href="http://www.amazon.co.jp/gp/product/4774165166/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774165166&linkCode=as2&tag=chopschips03-22">パーフェクト Ruby on Rails</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=chopschips03-22&l=as2&o=9&a=4774165166" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
は<strong>「これからRailsを覚える同僚に紹介する」</strong>という用途にも最適な一冊だと思います。</p>

<p>こういう書籍の内容は"Railsの標準機能"の枠に収まっている事が多いのですが、実際の開発現場においてはRails本体の機能ではないものの、
多くの現場でデファクトスタンダードになっているgemが数多く存在します。</p>

<p>そのような情報に関してはアンテナを広げてキャッチアップしていくしかないのですが、
この書籍はRails非標準の内容にまで深く踏み込んでおり、初学者の最初の一歩をブーストしてくれます。
もちろん非標準の内容については広く普及しているかどうか(かつ長くその地位を保てるか)意見のわかれる点でもあるのですが、
少なくとも自分の主観で読み進めて違和感のある部分はほとんどありませんでした。</p>

<p>Railsで初めてWebアプリ開発を行うという方には適切ではないかもしれませんが、
他の言語・フレームワークの経験があるような技術者にはこれくらいの内容のほうが効率が良いです。</p>

<p>具体的にどこがよかったかについては後半で述べます。</p>

<p>2冊目の
<a href="http://www.amazon.co.jp/gp/product/4774164100/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4774164100&linkCode=as2&tag=chopschips03-22">Ruby on Rails 4 アプリケーションプログラミング</a><img src="http://ir-jp.amazon-adsystem.com/e/ir?t=chopschips03-22&l=as2&o=9&a=4774164100" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
は、1冊めを補完する目的でおすすめです。
バリデータやビューのヘルパなどのリファレンス的な情報が豊富です。</p>

<p>今回は、特に"パーフェクトRuby on Rails"について良いと思った点をメモしておこうと思います。</p>

<!-- more -->


<a name="L...........................................Ruby.on.Rails"></a>
<h1>ここがおすすめ：パーフェクト Ruby on Rails</h1>

<p>「この本以外では載っているのを見たことがない！」というトピックばかりではありませんが、読んでいて目に止まったおすすめポイントを雑にメモしていきます。</p>

<p><code>foobar</code>みたいになっているのはgemの名前かコード片です。<br/>
<strong>パッと見て心当たりが無いものが多い</strong>ならこの本を読む価値ありだと思います。</p>

<ul>
<li>Railsのバージョンが4.1.1とかなり新しい。(2014-06-18時点で最新)</li>
<li>92ページまででscaffoldingやMVCのような伝統的Rails入門が終わり、残りの約300ページは後述するような実践的な内容。</li>
<li>HamlとSlimについてコード例を示しつつ紹介している。(実際のところERBで書いてるようなプロジェクトは稀だと思う)</li>
<li>Asset PipelineについてSprocketsから丁寧に解説がある。</li>
<li>CoffeeScriptの要点をおさえた解説。Source Mapsに対する言及など。</li>
<li>Sassの詳細な解説</li>
<li>Turbolinksの解説

<ul>
<li>動作条件や発生するイベントなどの一覧</li>
<li><code>jquery-turbolinks</code> にも言及</li>
<li>イベントの多重定義などよくある落とし穴の回避方法</li>
</ul>
</li>
<li><strong>WorkerやDecoratorのようなMVC以外の新しいレイヤーの定義方法</strong></li>
<li><code>sidekiq</code> を用いた非同期処理</li>
<li>PryとRailsの組み合わせ方</li>
<li><code>hirb</code>や<code>better_errors</code>のような開発支援gemの紹介</li>
<li>サンプルアプリケーション

<ul>
<li>動作保証のため、使用しているgemのPatchレベル以外のバージョンが固定されている</li>
<li>OAuthを使ったTwitterアカウントによる認証を例示(<code>omniauth</code>)</li>
<li>BootstrapをRailsアプリで使う方法を例示。モーダルを表示してAjaxでフォーム送信など。</li>
<li><code>devise</code>を使わずシンプルに認証を実装。(<code>devise</code>については別項で言及)</li>
<li><code>kaminari-bootstrap</code>や<code>ransack</code>、<code>carrierwave</code>のような定番gemの利用</li>
<li>コードがgithubで公開されています。<a href="http://willnet.in/124">パーフェクト Ruby on Rails のサンプルアプリケーションを Github 上で公開しました &ndash; willnet.in</a></li>
</ul>
</li>
<li><strong>コントローラ層でのエラーハンドリング</strong>

<ul>
<li>存在しないアクションをリクエストされた時に500の代わりに404を返す方法</li>
<li><code>exception_notification</code> を使ったエラーの通知</li>
</ul>
</li>
<li>結構まじめにminitestとRSpecの比較をしている。</li>
<li>RSpecは3系の使い方に触れている(6/2にリリース)</li>
<li>fixture replacementの項で<code>factory_girl</code>の使い方を説明</li>
<li>RSpecのexpect記法とshould記法について軽く説明</li>
<li>エンドツーエンドテストは<code>capybara</code>と<code>poltergeist</code>を使っている。(Seleniumはあまり使われていないとぶっちゃけている)</li>
<li>Vagrantを紹介する際に不正なboxを使ってしまう危険性に触れた上で、Phusion社がソースごと公開しているboxの利用を例示</li>
<li>Chef-soloを使ったプロビジョニングをそこそこに解説</li>
<li>Unicornで<code>preload_app</code>を有効にしつつgraceful restartする方法</li>
<li>Capistranoは3系で解説

<ul>
<li><code>capistrano3-unicorn</code>を使用</li>
<li>deploy実行時のフックとフローについて簡単に解説</li>
</ul>
</li>
<li>New Relicの結構詳細な解説</li>
<li>ログをfluentdで集めてkibanaで可視化する方法についてざっくり紹介</li>
<li>実践的なモデル設計の解説

<ul>
<li>モデルクラスの分割方法</li>
<li>ActiveModel::EachValidatorの使い方</li>
<li>ActiveModelの使い方</li>
<li>Concern</li>
<li>サービスクラスを用いるモデル設計</li>
</ul>
</li>
<li><strong>Basic認証を題材としたRack Middlewareの作り方の本格的な解説</strong></li>
<li>Railtieとは何か、という説明</li>
<li><strong>プラグインの作り方(gem化まで丁寧に解説)</strong>

<ul>
<li>Railtie型</li>
<li>Engine型</li>
</ul>
</li>
<li>rbenvの使い方が書いてある。</li>
</ul>


<p>最近のRailsはCoffeeScriptやSassなどruby以外に必要な知識が増えましたが、
Asset Pipelineの依存性管理などややこしい部分からsassのディレクティブに至るまで丁寧にカバーしてあります。</p>

<p>また、capistranoやrspecなどは過去のバージョンと比較して大きく変わっている部分もあり、
Webだけで勉強しようとすると古い情報を掴んで混乱する可能性があるため、
書籍という形である程度まとまった情報になっていると人に薦めるときに便利です。</p>

<p>繰り返しになりますが、実質的にデファクトスタンダードになっているgemがたくさんあるにも関わらず、
Rails標準の機能の解説に留まっている書籍やトレーニングコースも多いです。
本書は<code>kaminari</code>、<code>omniauth</code>、<code>carrierwave</code>、<code>poltergeist</code>など多数のgemが紹介されており、
フロントエンドにBootstrapを使ったサンプルアプリの実装を通じて効率よくメジャーな道具を学習することができます。</p>

<p>以上、おすすめポイントのまとめでした。</p>

<iframe src="http://rcm-fe.amazon-adsystem.com/e/cm?t=chopschips03-22&o=9&p=8&l=as1&asins=4774165166&ref=qf_sp_asin_til&fc1=000000&IS2=1&lt1=_blank&m=amazon&lc1=0000FF&bc1=000000&bg1=FFFFFF&f=ifr" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>


<hr />

<a name="L......"></a>
<h3>蛇足</h3>

<ul>
<li><code>spring</code>ってなんか動作が遅くないですかね。4.1で標準になったので紹介されているんだと思いますが、結局まだ<code>zeus</code>使ってます。</li>
<li><code>cancan</code>は最近は<code>cancancan</code>とか出てきててややカオス。触れられていないのはそれが理由かな。そもそも認証と認可は安易に外部実装に頼らないほうが良いという意見もあるし。</li>
<li>デバッガについてはRails本の範疇外かな。<code>byebug</code>と<code>ruby-debug</code>周辺はどうなっていくんだろう。</li>
<li>プロファイリングについても少し書いて欲しかったかも。</li>
</ul>

]]></content>
  </entry>
  
</feed>
